---
const { questions, generate, includeLinks, shuffle } = Astro.props;
import { MultipleChoiceQuestion } from "@common/MultipleChoiceQuestionGenerator";
import { default as Question } from "@components/MultipleChoiceQuestion/MultipleChoiceQuestion.astro";
import "./Evaluation.scss";
import Button from "@components/Button/Button.astro";
import { dynamicImport } from "@utilities/index";

interface QuestionData {
  question: MultipleChoiceQuestion;
  links: {
    question: string;
    solution?: string;
    generator?: string;
  };
}

const loadedQuestions = await Promise.all(
  questions.map(async (question: any) => {
    const importString = `../../content/questions/${question}/index.md`;
    const data = await dynamicImport(importString, import.meta.url);
    return data;
  }),
);

const sorttedQuestions = loadedQuestions.sort
  ? loadedQuestions.sort(
      (a: any, b: any) =>
        questions.indexOf(a.frontmatter.path) -
        questions.indexOf(b.frontmatter.path),
    )
  : loadedQuestions;

if (shuffle) {
  sorttedQuestions.sort(() => Math.random() - 0.5);
}

const multipleChoiceQuestions = sorttedQuestions.filter(
  (data: any) => data.frontmatter.type === "multiple-choice",
);

let multipleChoiceQuestionData: QuestionData[] = [];

await Promise.all(
  multipleChoiceQuestions.map(async (question: any) => {
    // if generate is true and a generator is present on the question, generate the question
    if (generate && question.frontmatter.generator) {
      const importString = `../../content/questions/${question.frontmatter.path}/generator`;
      const module = await dynamicImport(importString, import.meta.url);
      const klass = new module.default();
      const generatedQuestion = klass.generateQuestion();
      const questionData: QuestionData = {
        question: generatedQuestion,
        links: {
          question: question.frontmatter.path,
          solution: question.frontmatter.solution
            ? `solution/${question.frontmatter.path}`
            : undefined,
          generator: question.frontmatter.generator
            ? `generator/${question.frontmatter.path}`
            : undefined,
        },
      };

      multipleChoiceQuestionData.push(questionData);
    } else {
      const importString = `../../content/questions/${question.frontmatter.path}/question`;
      const data = await dynamicImport(importString, import.meta.url);

      // shuffle since this is the hardcoded question
      const shuffledQuestion = {
        ...data.question,
        options: data.question.options.sort(() => Math.random() - 0.5),
      };

      const dataLinks = {
        question: question.frontmatter.path,
        solution: question.frontmatter.solution
          ? `solution/${question.frontmatter.path}`
          : undefined,
        generator: question.frontmatter.generator
          ? `generator/${question.frontmatter.path}`
          : undefined,
      };

      const questionData: QuestionData = {
        question: shuffledQuestion,
        links: dataLinks,
      };

      multipleChoiceQuestionData.push(questionData);
    }
  }),
);

const sortedQuestionData = multipleChoiceQuestionData.sort(
  (a: QuestionData, b: QuestionData) =>
    questions.indexOf(a.links.question) - questions.indexOf(b.links.question),
);
---

<div>
  {
    sortedQuestionData.map((data: QuestionData, index: number) => (
      <div class="Evaluation__question">
        <Question question={data.question} index={index} />
        {includeLinks && (
          <div class="Evaluation__questionLinks">
            <a href={`/questions/${data.links.question}`}>
              <Button
                icon="mdi mdi-help"
                disabled={data.links.question ? false : true}
              />
            </a>
            {data.links.solution ? (
              <a href={`/questions/${data.links.solution}`}>
                <Button
                  icon="mdi mdi-check-bold"
                  disabled={data.links.solution ? false : true}
                />
              </a>
            ) : (
              <Button icon="mdi mdi-check-bold" disabled={true} />
            )}
            {data.links.generator ? (
              <a href={`/questions/${data.links.generator}`}>
                <Button
                  icon="mdi mdi-creation"
                  disabled={data.links.generator ? false : true}
                />
              </a>
            ) : (
              <Button icon="mdi mdi-creation" disabled={true} />
            )}
            <a
              href={`https://github.com/CarletonComputerScienceSociety/questions/blob/main/src/content/questions/${data.links.question}/index.md`}
            >
              <Button icon="mdi mdi-github" />
            </a>
          </div>
        )}
        <br />
      </div>
    ))
  }
</div>
<Button id="submit" icon="mdi mdi-upload" label="Submit" />
<Button
  id="refresh"
  icon="mdi mdi-refresh"
  label="Refresh"
  onclick="window.location.reload()"
/>

<script>
  const nodes = document.getElementsByClassName("MultipleChoiceQuestion");

  for (let i = 0; i < nodes.length; i++) {
    const options = nodes[i].children[1].children;
    for (let j = 0; j < options.length; j++) {
      const option = options[j];
      option.addEventListener("click", () => {
        for (let k = 0; k < options.length; k++) {
          options[k].setAttribute("data-selected", "false");
        }
        option.setAttribute("data-selected", "true");
      });
    }
  }

  const submit = document.getElementById("submit");
  // @ts-ignore
  submit.addEventListener("click", () => {
    let correct = 0;
    let total = 0;
    for (let i = 0; i < nodes.length; i++) {
      const options = nodes[i].children[1].children;
      for (let j = 0; j < options.length; j++) {
        const option = options[j];
        const correctOption = option.getAttribute("data-correct");
        const selectedOption = option.getAttribute("data-selected");
        if (correctOption === "true") {
          total++;
          if (selectedOption === "true") {
            correct++;
          }
        }
      }
    }

    const options = document.querySelectorAll(".MultipleChoiceQuestionOption");
    for (let i = 0; i < options.length; i++) {
      const element = options[i] as Element;
      element.setAttribute("data-revealed", "true");
    }
    // alert(`You got ${correct} out of ${total} correct!`);
  });
</script>
