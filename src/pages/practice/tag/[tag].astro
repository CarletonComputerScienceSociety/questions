---
import { getCollection } from "astro:content";
import Back from "@components/Back/Back.astro";
import Evaluation from "@components/Evaluation/Evaluation.astro";
import { default as Layout } from "src/layouts/Content/Content.astro";
import MathJax from "@components/MathJax.svelte";

export async function getStaticPaths() {
  return [
    { params: { tag: "comp2804-midterm" } },
    { params: { tag: "comp2804-final" } },
    { params: { tag: "comp2804-de-morgan's-law-(no-corresponding-chapter)" } },
    { params: { tag: "comp2804-the-product-rule-(3.1)" } },
    { params: { tag: "comp2804-counting-bitstrings-of-length-n-(3.1.1)" } },
    { params: { tag: "comp2804-counting-functions-(3.1.2)" } },
    { params: { tag: "comp2804-placing-books-on-shelves-(3.1.3)" } },
    { params: { tag: "comp2804-the-bijection-rule-(3.2.1)" } },
    { params: { tag: "comp2804-the-complement-rule-(3.3)" } },
    { params: { tag: "comp2804-the-sum-rule-(3.4)" } },
    {
      params: {
        tag: "comp2804-the-principle-of-inclusion-and-exclusion-(3.5)",
      },
    },
    {
      params: { tag: "comp2804-permutations-and-binomial-coefficients-(3.6)" },
    },
    {
      params: {
        tag: "comp2804-permutations-and-binomial-coefficients-(3.6.1)",
      },
    },
    { params: { tag: "comp2804-newton's-binomial-theorem-(3.6.2)" } },
    {
      params: {
        tag: "comp2804-permutations-and-binomial-coefficients-(3.6.2)",
      },
    },
    { params: { tag: "comp2804-combinatorial-proof-(3.7)" } },
    { params: { tag: "comp2804-reordering-the-letters-of-a-word-(3.9.1)" } },
    {
      params: {
        tag: "comp2804-counting-solutions-of-linear-equations-(3.9.2)",
      },
    },
    { params: { tag: "comp2804-the-pigeonhole-principle-(3.10)" } },
    { params: { tag: "comp2804-recursive-functions-(4.1)" } },
    { params: { tag: "comp2804-fibonacci-numbers-(4.2)" } },
    { params: { tag: "comp2804-counting-00-free-bitstrings-(4.2.1)" } },
    { params: { tag: "comp2804-a-recursively-defined-set-(4.3)" } },
    { params: { tag: "comp2804-uniform-probability-spaces-(4.4)" } },
    { params: { tag: "comp2804-euclid's-algorithm-(4.5)" } },
    { params: { tag: "comp2804-discrete-probability-(5)" } },
    { params: { tag: "comp2804-basic-rules-of-probability-(5.3)" } },
    {
      params: {
        tag: "comp2804-the-probability-of-getting-a-full-house-(5.4.1)",
      },
    },
    { params: { tag: "comp2804-the-birthday-paradox-(5.5)" } },
    { params: { tag: "comp2804-conditional-probability-(5.8)" } },
    { params: { tag: "comp2804-the-law-of-total-probability-(5.9)" } },
    { params: { tag: "comp2804-independent-events-(5.11)" } },
    { params: { tag: "comp2804-rolling-two-dice-(5.11.1)" } },
    {
      params: {
        tag: "comp2804-a-basic-property-of-independent-events-(5.11.2)",
      },
    },
    { params: { tag: "comp2804-question-(5.73)" } },
    { params: { tag: "comp2804-random-variables-and-expectation-(6)" } },
    { params: { tag: "comp2804-random-variables-(6.1)" } },
    { params: { tag: "comp2804-independent-random-variables-(6.2)" } },
    { params: { tag: "comp2804-expected-values-(6.4)" } },
    { params: { tag: "comp2804-linearity-of-expectations-(6.5)" } },
    { params: { tag: "comp2804-determining-the-expected-value-(6.6.1)" } },
    { params: { tag: "comp2804-determining-the-expected-value-(6.7.1)" } },
    { params: { tag: "comp2804-indicator-random-variables-(6.8)" } },
  ];
}

const { tag } = Astro.params;

const taggedQuestions = await getCollection("questions", (page) => {
  if (!page || !page.data || !page.data.tags) return false;
  return page.data.tags.includes(tag);
});

const randomQuestion =
  taggedQuestions[Math.floor(Math.random() * taggedQuestions.length)];

// TODO we should not be generated the title of the path
function formatString(input: string) {
  let [_course, mainPart, numberPart] = input.split("/");

  mainPart = mainPart
    .split("-")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");

  return `${mainPart} - ${numberPart}`;
}

const title = formatString(randomQuestion.data.path);

const tabTitle = tag
  .slice(9)
  .replace(/-/g, " ")
  .replace(/\b\w/g, (c) => c.toUpperCase());
---

<Layout title={tabTitle}>
  <div class="Question__bar">
    <div>
      <Back />
    </div>
  </div>

  <h1>{title}</h1>

  <Evaluation
    questions={[randomQuestion.data.path]}
    generate={true}
    includeLinks={true}
  />

  <MathJax client:load />
</Layout>
